#+TITLE: System Configuration with Guix
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#channels][Channels]]
- [[#systems][Systems]]
  - [[#base-configuration][Base Configuration]]
  - [[#machines][Machines]]
    - [[#per-system-settings][Per-System Settings]]
    - [[#zerocool][zerocool]]
    - [[#acidburn][acidburn]]
    - [[#davinci][davinci]]
    - [[#phantom][phantom]]
  - [[#usb-installation-image][USB Installation Image]]
- [[#profile-management][Profile Management]]
  - [[#activating-profiles][Activating Profiles]]
  - [[#updating-profiles][Updating Profiles]]
  - [[#updating-channels][Updating Channels]]
- [[#dotfiles-management][Dotfiles Management]]
  - [[#syncing][Syncing]]
  - [[#updating][Updating]]
- [[#nix-package-manager][Nix Package Manager]]
- [[#system-installation][System Installation]]
  - [[#building-the-installation-image][Building the Installation Image]]
  - [[#installing-guix][Installing Guix]]
    - [[#setting-up-wifi][Setting up WiFi]]
    - [[#setting-up-partitions][Setting Up Partitions]]
    - [[#initial-system-installation][Initial System Installation]]
    - [[#initial-system-setup][Initial System Setup]]
:END:

* Channels

Guix supports the concept of [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]] which basically amount to Git repositories which contain Guix package definitions that can be installed on your machine.  Aside from the =%default-channels= list, I also use the [[https://gitlab.com/nonguix/nonguix][Nonguix]] channel to install packages that aren't included with Guix by default like the non-free Linux kernel.

I also generate my real =.config/guix/channels.scm= file based on this =base-channels.scm= file.  This allows me to keep a pinned channel list in the real channels file while maintaining a canonical channel listing that I generate it from using the =update-channels= script (defined later in this file).

*.config/guix/base-channels.scm:*

#+begin_src scheme :tangle .config/guix/base-channels.scm

;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

(list (channel (name 'flat)
               (url "https://github.com/flatwhatson/guix-channel.git")
               (commit "7b8353ebbcf486e3344924d1cac0fa7ba47c371d")
               (introduction (make-channel-introduction "33f86a4b48205c0dc19d7c036c85393f0766f806"
                                                        (openpgp-fingerprint
                                                         "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
      (channel (name 'rde)
               (url "https://git.sr.ht/~abcdw/rde")
               (introduction (make-channel-introduction "257cebd587b66e4d865b3537a9a88cccd7107c95"
                                                        (openpgp-fingerprint
                                                         "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
      (channel (name 'nonguix)
               (url "https://gitlab.com/nonguix/nonguix"))
      (channel (name 'guix)
               (url "https://git.savannah.gnu.org/git/guix.git")
               ;; (url "file:///home/daviwil/Projects/Code/guix"))
               (introduction (make-channel-introduction "9edb3f66fd807b096b48283debdcddccfea34bad"
                                                        (openpgp-fingerprint
                                                         "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+end_src


* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.  Since all of my machines are Lenovo ThinkPad laptops, the same basic configuration applies pretty cleanly across all of them.  This may change in the future.

Any configuration that derives from =base-operating-system= must invoke =guix system= in a specific way to ensure it gets loaded correctly:

#+begin_src sh

sudo -E guix system -L ~/.dotfiles/.config/guix/systems reconfigure ~/.dotfiles/.config/guix/systems/davinci.scm

#+end_src

*.config/guix/systems/base-system.scm:*

#+begin_src scheme :tangle .config/guix/systems/base-system.scm

;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

(define-module (base-system)
  #:use-module (gnu)
  #:use-module (srfi srfi-1)
  #:use-module (gnu system nss)
  #:use-module (gnu services pm)
  #:use-module (gnu services cups)
  #:use-module (gnu services desktop)
  #:use-module (gnu services docker)
  #:use-module (gnu services networking)
  #:use-module (gnu services virtualization)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages xorg)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages file-systems)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages gnuzilla)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages web-browsers)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages package-management)
  #:use-module (nongnu packages linux)
  #:use-module (nongnu system linux-initrd))

(use-service-modules nix)
(use-service-modules desktop xorg)
(use-package-modules certs)
(use-package-modules shells)

#+end_src


Define the =base-operating-system= which will be inherited by all machine configurations.

# #+begin_src scheme :tangle .config/guix/systems/base-system.scm

# (define-public base-operating-system
#   )

# #+end_src

** Machines

*** dell

=dell= is a 5th Generation ThinkPad X1 Carbon that I use for system testing and Guix demonstrations for System Crafters.

*.config/guix/systems/dell.scm:*

#+begin_src scheme :tangle .config/guix/systems/dell.scm

;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

(define-module (dell)
  #:use-module (base-system)
  #:use-module (gnu))

(operating-system
    (host-name "guix")
    (timezone "America/New_York")
        (locale "en_US.utf8")

    ;; Use non-free Linux and firmware
    (kernel linux)
    (firmware (list linux-firmware))
    (initrd microcode-initrd)

    ;; Choose US English keyboard layout.  The "altgr-intl"
    ;; variant provides dead keys for accented characters.
    (keyboard-layout (keyboard-layout "us"))

    ;; Use the UEFI variant of GRUB with the EFI System
    ;; Partition mounted on /boot/efi.
    (bootloader (bootloader-configuration
                 (bootloader grub-efi-bootloader)
                 (target "/boot/efi")
                 (keyboard-layout keyboard-layout)))


    ;; Guix doesn't like it when there isn't a file-systems
    ;; entry, so add one that is meant to be overridden

    (file-systems (cons*
                (file-system
                 (device "/dev/sda2")
                 (mount-point "/")
                 (type "ext4"))
                (file-system
                 (device "/dev/sda1")
                 (mount-point "/boot/efi")
                 (type "vfat"))
                 %base-file-systems))


    (users (cons (user-account
                  (name "dhyan")
                  (comment "Dhyan Raj")
                  (group "users")
                  (home-directory "/home/dhyan")
                  (supplementary-groups '(
                                          "wheel"     ;; sudo
                                          "netdev"    ;; network devices
                                          "kvm"
                                          "tty"
                                          "input"
                                          "docker"
                                          "realtime"  ;; Enable realtime scheduling
                                          "lp"        ;; control bluetooth devices
                                          "audio"     ;; control audio devices
                                          "video")))  ;; control video devices

                 %base-user-accounts))

    ;; Add the 'realtime' group
    (groups (cons (user-group (system? #t) (name "realtime"))
                  %base-groups))

    ;; Install bare-minimum system packages
    (packages (append (list
                        git
                        ntfs-3g
                        exfat-utils
                        fuse-exfat
                        stow
                        vim
                        emacs
                        xterm
                        bluez
                        bluez-alsa
                        pulseaudio
                        tlp
                        xf86-input-libinput
                        nss-certs     ;; for HTTPS access
                        gvfs)         ;; for user mounts
                    %base-packages))

    ;; Use the "desktop" services, which include the X11 log-in service,
    ;; networking with NetworkManager, and more
    (services (cons* (service slim-service-type
                              (slim-configuration
                                (xorg-configuration
                                  (xorg-configuration
                                    (keyboard-layout keyboard-layout)
                                    (extra-config (list %xorg-libinput-config))))))
                    (service tlp-service-type
                             (tlp-configuration
                                (cpu-boost-on-ac? #t)
                                (wifi-pwr-on-bat? #t)))
                    (pam-limits-service ;; This enables JACK to enter realtime mode
                     (list
                      (pam-limits-entry "@realtime" 'both 'rtprio 99)
                      (pam-limits-entry "@realtime" 'both 'memlock 'unlimited)))
                    (extra-special-file "/usr/bin/env"
                      (file-append coreutils "/bin/env"))
                    (service thermald-service-type)
                    (service docker-service-type)
                    (service libvirt-service-type
                             (libvirt-configuration
                              (unix-sock-group "libvirt")
                              (tls-port "16555")))
                    (service cups-service-type
                             (cups-configuration
                               (web-interface? #t)
                               (extensions
                                (list cups-filters))))))

    ;; Allow resolution of '.local' host names with mDNS
    (name-service-switch %mdns-host-lookup-nss))


#+end_src
